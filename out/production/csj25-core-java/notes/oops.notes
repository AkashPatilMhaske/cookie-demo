Session #3: Monday: 22 August  2022 8 AM- 10 AM
Class: It is an keyword in java which is used to create a Class[classification]
Class came from classification which stands for grouping,
It is a blueprint, template, structure, layout, guidelines to create an object
Floor plan —> Building
Class —> Object
Each class has name, attributes, behaviour

class ClassName {
	//attributes, state, variables, fields, columns, properties, feature
	//behaviours, method, function, procedure, task, implementation, routine
}
——————
Instance : It is an allocated memory space at runtime.
Object: It is an instance of a class.
		i.e. It is a memory space allocated for class type data.
Every object is an instance. But vice versa need not be true.

To create objects, first we need a class.

How do mean by object creation?

Why do we need Objects?
- to represent real time logical & physical entities in the program

How do we create an Object?
- DerivedDataType referenceVariableName = new DervidedDataType();
e.g. Movie movie = new Movie();
	- Movie -  Derived data type
	- movie - reference variable which holds the address or reference of an Object
	- new : it is a keyword to create objects
	- new Movie(); —> Object

# Primitive variable : A variable which holds the direct value of type byte, short, int long, float, double, char, boolean
	e.g. int rollNumber = 100;

# Reference variable : A variable which holds the address or reference of an object
		e.g. Movie movie = new Movie();
		- movie is reference variable

Class Components {
	1. Variables
		1. Instance
			1. Primitive Instance Variable
			2. Non-Primitive or Reference Instance variable
		2. Static
			1. Primitive Static Variable
			2. Non-Primitive or Reference Static variable
		3. Local
			1. Primitive Local Variable
			2. Non-Primitive or Reference Local variable

	2. Methods
		1. Instance methods
		2. Static methods

	3. Constructor
		1. Default constructor
		2. Zero param constructor
		3. Parameterised constructor

	4. Blocks
		1. Instance block
		2. Static block

	5. Nested Classes
		1. Inner classes or non-static nested classes
		2. Static nested classes
		3. Local Inner classes
		4. Anonymous class

}
——————
Why  do we need local variables?
- To store data for temporary calculations in the program.
	, int sum, avg, percentile

Why  do we need instance variables?
- To store data for object specific.
	e.g. int rollNumber, studentName

Why  do we need static variables?
- S- Share- Static- Common
- We use static variables to store common data for all the objects.
e.g. college Name

------------------------------------------------------------------------
Tuesday: 23 August  2022 8:30 AM- 10 AM

1. Compile Java file
2.  load the .class files in the memory with the help of class-loaders.
    - we have three different types of class-loaders
    1. Bootstrap class loader
    2. system class loaders
    3. Extension class loader
3. Java execution memory area is divided into different components:
    - HEAP Memory area:
        -We use heap memory to store objects and inside the object we have instance variables

    - Java Method Execution Stack Memory Area:
        - To store the local variables
        - To maintain the java method execution
        - At the end of program execution, stack will be empty.

    - Class or Method Memory Area:
        - To store static variables

    - Native Method execution Memory Area:
        - We use this space for non-java[native methods] methods execution

    - Native Method Execution Stack Memory Area:
              - To store the non-java method variables
              - To maintain the native method execution
              - At the end of program execution, stack will be empty.

    - PC Register: It maintains the record of next instruction to be executed.

    * Native method Interface : It loads the native methods from the Native method library into Native Method Area
    * Native Method library: It has non-java methods
------------------------------------------------------------------------
 Variable Component in the class:
 - What is a variable?
    - It is a name give to a memory location address.
    - We use variable to store the data or access the existing data

# Based on the content of the variable:
- Primitive Variable which holds the single value of predefined primitive type.
    e.g. int age = 69;
- Non-Primitive or Reference Variable which holds the address or reference of an object.
    Student student = new Student();
        - student is reference variable

# Based on the usage and location of the variable
1. Instance Variable:
    What is it?
     - It is an variable which stores the object specific information.
     - It is created at class level, outside of all components but inside the class.
     - it is also called as class level variables because they are created at class level outside of all methods, constructors, blocks

    Why do we need instance variables?
     - To store the object specific information.

    Where instance variables are stored?
        - They are stored inside the heap memory are and will part of an object

    How do we create instance variables?
        class Student {
            int rollNumber; // Primitive instance variable
            String studentName; // Non-Primitive instance variable
        }

    When instance variables get the memory?
    - When an object is created, then instance variables will be getting memory allocated.

    When instance variables will be destroyed?
    - When an object is destroyed.

    How many times instance variables will be getting memory?
        - Every time we create an object, instance variables will be getting the memory.

    How do we access instance variables?
        - We access instance variables with the help of reference variable.


# Local Variables:
- Variables which are created inside the method, constructor, blocks, method parameter, constructor parameter
* Local variables wont get the default value. Developer is responsible for that
- Local variables are local to the method/constructor/block.
- They cant be accessed outside.
- We use local variables for temporary calculations.

When local variables will get the memory?
- When method/constructor/block is called.

When local variables will be destroyed?
- When method/constructor/block has completed the execution.

** We don't need any reference variable or class name to access local variables.

-----------------------------------------------------------------------------
Static Variable:

Q.1 What is it?
     - It is an variable which stores the information/data which is common for all objects.
     - It is created at class level, outside of all components but inside the class with the static keyword
     - it is also called as class level variables because they are created at class level outside of all methods, constructors, blocks

Q.2 Why do we need static variables?
     - To store the information which is common for all the objects.

Q.3. Where static variables are stored?
        - They are stored inside the CLASS or Method memory.

Q.4. How do we create static variables?
        class Student {
            static String collegeName; // Non-primitive static variable
            static int studentCount; // primitive static variable
        }

Q.5. When static variables will get the memory?
    - When a class is loaded into the memory, then static variables will be getting memory allocated.

Q.6. When static variables will be destroyed?
    - When an class is unloaded from the memory.

Q.7. How many times static variables will be getting memory?
     - Only once at the time of class loading into memory.

Q.8. How do we access static variables?
    - We access static variables with the help of class name.

Q.9. Will static variables get the default values?
     - They will get the default value.

Q. 10. Can we create static variables inside the method/block/constructor?
Ans. No. We can't. If we try to do it will give you CTE.

Q. 11. Do we need object to be created to access static variables, static methods?
Ans. No. We access static members with the help of class name.

----------------------------------------------
Method/Task/Behavior/Procedure/Routine/Implementation/Function/:

Q.1. What is it?
- It is a group of statements/instructions enclosed inside the curly braces which supposed to be perform specific task
- Method can accept multiple, single or zero inputs
- Method can return multiple, single or zero outputs
- Method may or may not have names.

____________________________________________________________
Questions on main method:
1. Why main method is public?
Ans. public is an keyword which is used specify the access for the class components.
     pubic means this component can be accessed throughout the application.
     So JVM can easily access the main method.

2. Who calls main method and how many times?
Ans. JVM calls main method only once

3. How does JVM calls main method?
Ans. Since main method is static, jvm calls the main method with the help of class name

4. Why main method is static?
Ans. -If main method is non-static then jVM has to creat object to call the main method.
    - If the developer provides any constructor then default constructor will not be provided
        - then this case JVM will be in confusion to which constructor to call to create object.
    - So to avoid this confusion, main method is created as static.
    - Now JVM no need to create the object, it can simply call the main method with the help of classname

5. what can be changed in the  main method signature?
Ans. - we can change the sequence of public static to static public
    - main method parameter name can be changed.

# void: it is a datatype that specifies nothing will be returned from the method
# what is String[] args : This is an array of Strings which can be used by JVM to pass runtime arguments

6. can we call main method explicitly?
Ans. Yes. We call it with the help className.


Constructors:
Q.1 What is a constructor?
Ans:-






























