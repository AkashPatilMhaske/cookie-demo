Polymorphism :
- poly: many
- morph : forms

- It is an ability of an object to changes its behaviour either at compile time or run time.

- Compile time polymorphism / static binding / early binding /
    - we achieve compile time polymorphism with method overloading

- Run time polymorphism / dynamic binding / late binding /
    - we achieve run time polymorphism with method overriding

What do you mean by object behaviour change?
- Every object has
    - state / fields / attributes / columns / variables / instance variables
    - behaviour / method / function / procedure / implementation / task / instance methods / forms

- Behaviour change means changing the method body by keeping method name same.
------------------------------------------------------------------------------------------------------------

Method overloading :
- it is a process of defining multiple methods with same name and
    different signature( either type of parameters or no. of parameters)

- We can overload private methods
- We can overload static methods
- We can overload final methods
- We can overload main method.
- We can overload constructors.

We do not consider return type for the method overloading.
- In method overloading, call to the method is decided at compile time.

** method overloading can happen in the same class as well as Parent- Child class

Method overloading:
    - We can define the method in the child class with the same name,
     - but different signature as of Parent class method.

------------------------------------------------------------------------------------------------------------
Method overrding:
    - It is a process of defining a method in the child class with the
        - same name
        - same signature
        - same return type
        as of Parent class method.
class A{
    void m1(){}
}
class B extends A{
    void m1(){}
}

Why do we go with the method overrding?
- If we are not happy with the parent class implementation

Rules :
    1. We can't override private methods
    2. We can't override static methods
    3. We can't override final methods
    4. We can increase the method access specifier scop but can't do demotion
        private > default > protected > public
        e.g if parent class is having method visibility to public, then child class method must be public
------------------------------------------------------------------------------------------------------------
final keyword :
- we can apply final keyword for variables, methods, class
1. if a variable is final, we cannot reassign the value.
2. if a method is final, we can't override it
3. if a class final, we can't extend it.
4. If instance variable are final, then they should initialized either in the same line or in the constructor.
5. If static variable are final, then they should initialized either in the same line or in the static block.
- If a reference variable is final, it means it will always point to the same object.
- We can change the object content
------------------------------------------------------------------------------------------------------------
What is an Immutable class?
- It is a class where once object is created we cannot change the content of an object.
e.g. String, all wraper classes[Byte, Short, Integer, Character, Long]

To make any class immutable,
1. We make the class final
2. we make the class members private
3. We do not public setters.

We can create the object of an immutable class
------------------------------------------------------------------------------------------------------------

Concrete method : method which has implementation[body {}]
Concrete class :
    - A class which contains only concrete methods.
    - A normal java class i.e. concrete class cannot have incomplete methods i.e. abstract methods
    - If we write abstract method in a concrete class we ge CTE

Abstraction : It is a process of exposing the functionality and hiding the implementation[method body] details.
Q. How do we achieve abstraction?
A. We achieve abstraction with the help of abstract class and interface.

abstract method :
    - A method which does not have method body and declared with the help of abstract keyword.
         e.g. abstract void m1();
    - an abstract method cannot be written inside the concrete class.
    - We can define abstract method inside the abstract class or interface
    - A method cannot be both abstract and final. Either It can be abstract or final not both

# abstract class :
- A class which is created with abstract keyword.
- e.g, abstract class A {}
- We use abstract class to define abstract methods.
- It is optional to write abstract methods inside the abstract class or an interface.
- we can have empty abstract class.
- A class cannot be both abstract and final. Either It can be abstract or final not both
- An abstract class can contain everything from concrete class + abstract methods

Q. Can we create the object of an abstract class?
A. No. By writing the abstract keyword, we tell compiler that it is an incomplete
   So we can't create object even though class is empty.

Q. Can we write main method inside the abstract class?
A. We can write.

Since we cannot create the object of an abstract class, how can we call abstract class constructor?

-- When a concrete class extends another abstract class, then in the concrete class we must override abstract methods.
- When one abstract class extends another abstract class, then it is optional for the child class to override abstract methods.

Q. How can we call constructor of the abstract class?
A. - Create a concrete subclass then create the object.
   - From child class constructor, it will call abstract class constructor.


# Disadvantages with Abstract class:
1. We can not achieve multiple inheritance
2. We can not achieve 100% abstraction. Even though class is abstract there is not guarantee that it will have only abstract methods

What is the use of abstract class?
- to achieve abstraction[] hiding the implementation details and providing only functionality.
------------------------------------------------------------------------------------------------------------
interface :
- it is a class which is fully unimplemented class.
- this is a class which contains only abstract methods till java 7.
- from java  8 onwards, interface can contain default and static methods as well.

- By default all the variables in the interface are public static final
- By default, all the methods in the interface are public abstract.

In an interface, we cant have
    - instance variables
    - instance methods
    - instance block
    - constructor

We achieve multiple inheritance with the help of interface.




















Abstract class : it is a class created with abstract keyword
Why do we use abstract class? To write abstract methods
To achieve abstraction.
Abstract method : it is a method which is created without body and with abstract keyword
We can write abstract method inside the abstract class and interface
We can’t create the object of an abstract class interface as abstract stands for incomplete
In an interface we can write all the components from an concrete class plus we can write abstract methods
It is not compulsory to write abstract methods inside the abstract class as well as interface.
abstract class MessageService {
}
We create the subclass and then create the object of subclass then eventually parent abstract class constructor will called.
We can’t achieve multiple inheritance with abstract classes.
We can’t achieve 100% abstraction as we can’t guarantee presence only abstract methods inside the abstract class.
Abstract and final are opposite to each other.
Class cannot be both final and abstract.
Abstract methods are meant for giving override so they cannot be private, final, static
# Interface : it is a fully unimplemented class.
- It contains only abstract methods.
- variables in the interface by default public static final
- methods in the interface by default are public abstract
- as part of an interface we can’t have instance
	- instance variables,
	- instance methods,
	- constructors
	- instance block
	- inner classes
	- static block
These are not allowed because to we can achieve multiple inheritance with interfaces.
One class implements another interface
One class extends another class
One interface extends another interface
* when one concrete class extends an abstract class or implements an interface, then it is compulsory for the concrete class give override for all the abstract methods
* when one one abstract class extends another abstract class or implements an interface then it is optional for the child abstract class to provide implementation
We can’t create object of an abstract class as well as interface.
# Types of interfaces
1. Marker interface : it is an empty interface which is used to marking purpose at runtime
	e.g. Serializable, Cloneable, Auto-closable
2. Function interface :
	- it is interface with only one abstract method. SAM
	- As part of Java 8, functional interface can have any number of default and static methods.
# default methods :
- It is a method which defined inside the java 8 interface with method body and default keyword.
- We use default methods for backward compatibility
- If we introduce a new abstract method inside an interface, then all implementing subclass will break.
- so avoid this, we make the newly introduced abstract method as default with method body. So subclass won’t
# what are the different ways to implement interfaces and abstract class
1. By creating separate concrete subclass by extending abstract class or implementing interface
	abstract class A{}
	class Ample extends A {}
	interface I1{}
	class I1Impl implements I1{}

2. By using anonymous class.
	A a = new A(){//body of the anonymous class};
	I1 I = new I1(){};
# What are the different ways to implement functional interface ?
1. By using separate concrete subclass
2. By using anonymous class
3. By using Lambda expression.
	interface MessageService (){
	void sendMessage ();//SAM
	}
	 MessageService messageService = () -> {SOP(“sending message”)};
# What is a lambda expression?
- it is a new feature in java 8
- it is a concise way of giving implementation of a function interface[SAM].
- It is also called as anonymous function.
- for lambda expression .class file will not be generated.
syntax: FunctionalInterface typeName = (method Params) -> { method implementation};
#Why we use lambda expression?
- we use lambda expression to give implementation for functional interfaces only.
- with lambda we can write concise code.

What are predefined functional interfaces available in Java?
- Runnable, Predicate, Function, Supplier, Consumer, UnaryOperator, BinaryOperator, BinaryConsumer, BiPredicate


# Object:
- It is super class for all the classes in java which are either pre-defined or going to be defined by the developer
- It is called as cosmic class as Object class do not have any parent class
- Object class is a concrete class which contains 11 methods:
- All these methods are regular used to for all the classes.
- All these methods are accessible for all the classes in java.
# methods present in Object class:
      # native methods[code is not written in java]
      public final native java.lang.Class<?> getClass();
      protected native java.lang.Object clone() throws java.lang.CloneNotSupportedException;
      public native int hashCode();

      public boolean equals(java.lang.Object);
      public java.lang.String toString();
      protected void finalize() throws java.lang.Throwable;

     # Methods related to multi-threading
      public final native void notify();
      public final native void notifyAll();
      public final native void wait(long) throws java.lang.InterruptedException;
      public final void wait(long, int) throws java.lang.InterruptedException;
      public final void wait() throws java.lang.InterruptedException;

 # equals();
 - it is a method originally present in Object class.
 - It does the reference check.
 - if reference are equal then it returns true otherwise false.
 - It generally recommended to override equals method.
 - if equals method is overriden then, always call will be given to the child class equals method and not object class

# hashCode();
- it is a method originally present in Object class.
- hashing means converting a bigger value into a smaller value.
- hashFunction takes the bigger a input and generates the hash[small value] for performance improvement
- hashcode method returns a hash i.e. integer value.
- it returns an integer value which is not a direct memory address but a hash calculated based on the original memory address of an object.
- It generally recommended to override hashCode method.
- if hashcode method is overriden then, always call will be given to the child class hashCode method and not object class

***** equals and hashCode contract ***********************
when we say two objects are equal by equals method then there hashCode must be same.



# toString();
- it is a method present Object class from java.lang package
- it returns a string containing the
    - classname: getClass().getName();
    - @
    - hexadecimal value of hashCode

        public String toString() {
            return getClass().getName() + "@" + Integer.toHexString(hashCode());
        }
 - toString method will be called implicitly when we print the reference.

# finalize();
- it is a method present in Object class.
- this method does not have any implementation


# garbage : any unused, unreferenced objects
# garbage collector :
    - It is a daemon thread[program] which is running in background.
    - It cleans or frees the unused memory
    - Before destroying the object it will call the finalize() method.

- finalize() method will be called by garbage collector just before objects gets destroyed.

How to call garbage collector explicitly?
- System.gc();
--------------------------------------------------------------------------------------------------------------

Problems before Array:
1. if we want to store multiple values, we have to create that many variables.
2. managing and accessing also all these variables will be difficult as they are not stored not sequentially.
3. length of the code will increase.

Requirement: To hold multiple values.
1. create that many variables.
2. use array

# What is an Array?
- it is data structure which helps us in storing data of same type in sequential manner.


#Array declaration and initilization:
int[] array;//delcration
array = new int[5];//initilzation

# when we create an array, an object is created inside the heap memory area and inside that object all the variables will be stored sequentially.
e.g. int[] array = new int[5];
    array : reference variable which points to an object
    new int[5]: an object which stores 5 variables

# Can we create an array with size zero?
Ans. Yes we can do. int[] array = new int[0];
    - array is created with zero elements.
    - object is created but no  elements inside that.

# Can we create an array with negative array size?
Ans. if we create an array with negative size we get runtime exception.
      NegativeArraySizeException

# for every array, there will be one variable called length created.
array.length

# To access the array elements we use concept of index.
- Array index starts from 0.
- Array reference always points to the base address where first element is stored.
- to access the array element: array[index].
- Address of an array element = BASE Address + index * data type size;
e.g. first element  = 100 + 0 *4; 100
      second element = 100 + 1 * 4; 104

If we try to access beyond the index, we get ArrayIndexOutOfBoundsException
Index range : 0 to length-1;

# Disadvantages:
1. arrays are fixed in nature. once array is created with specified size then at run time we cant increase or decrease the space
    -There will be either wastage or shortage of memory
2. we cant store heterogeneous[of different data type] data.
3. No built-in method support.
    - For every programming requirement such as searching, sorting, reverse, delete, insert
    developer is responsible.


------------------------------------------------------------------------------------------------------------------------
            String Handling

# character array:
if we store strings with the help of char array,
    - it is painful and complex, error-prone to store chars in single quotes.
    - no method support for string manipulation. For every requirement developer is supposed to write code
    - there will be either shortage or wastage of space

# String
* What is String class in Java?
- it is predefined concrete final class present in java.lang package
- String class implements Serializable, Comparable, CharSequence
- Since String class is final, we cant extend it.
- String class is an immutable class.
- Once String class object is created its object cannot be modified.

* Why to use String class?
-  It is used to store group characters.
-  String class uses array of characters to store this.
- String class provides a lot of built-in methods for character manipulation.

* How to use String class?
- we create the String object and start using string class methods
    1. String str = new String("hello");
    2. String strLiteral = "abc";

* What are different ways to create String class objects?
- There are two ways
    1. using new keyword
        e.g. String str = new String("hello");
    2. using literal way
        e.g. String strLiteral = "abc";
**** Creating objects using literal way is only possible for String class and not for any other class in entire java


What is the difference between creating the String objects using literal and new ?
- using new keyword,
    - objects will be created inside the heap memory without any object content check
    - also objects will be created inside the SCP if object content is not present already.

- using literal way
    - objects won't be created inside the HEAP
    - objects will be created inside SCP if the object is already not present
    - if object is already present inside the SCP, no new object will be created, only reference to the existing object will be returned

________________________________________________________________________________________________

Exception Handling:

# Exception:
- It is an unwanted, unexpected event that disturbs the normal flow of the program.
- When exception occurs rest of the code will not be executed.
- program terminates abnormally.

# What do you mean by exception handling?
- it is a process of preventing the abnormal termination of the program.

# What is default exception handling in java?
-
_______________________________________________________________________________________________________________________________________

# Framework : It contains pre-defined code.
# why to use framework:
- it saves development efforts.
- it will reduce the testing effort.
- framework provides well written and thoroughly tested code
- with the help of frameworks we can maintain uniform code.
- with frameworks we can focus on business logic instead of writing code for algorithms
    examples: Collection framework, Hibernate, Spring,



# Collection framework:
- it provides the pre-defined classes, interfaces, and methods[algorithms]
- with the help of these classes we can easily manage group of objects.
    - we can store single or multiple objects in the group of objects as a single unit
    - we search single or multiple objects in the group of objects
    - we can delete single or multiple objects in the group of objects
    - sort
    - search for a single object or multiple objects.

Collection(I): it is the interface which contains common methods for all the containers

List(I): It is an interface which extends Collection(I)
- when we want to store the group of objects that can be of same type or different type as single unit unit
- where objects can duplicate
- insertion is maintained.
- null insertion is possible as many as possible

Q. What are the List implementation classes?
- ArrayList, LinkedList, Vector, Stack

Q. Explain ArrayList.
- It is an implementation class of List(I)
- It is present in java.util package
- Internally it uses growable/dynamic array to store the group of objects as single unit
    - growable array means, arrays will be resized.
    - Once an array is fulled, new array is created with new capacity.
    - content of old array is copied to new array
    - New Capacity = Old Capacity + old capacity * 0.5 + 1;
    - default initial capacity is 10.
    - Is capacity and size are same?
        - size represents how many objects are currently present.
        - capacity  represents number objects that can be stored.
- Since it uses array to store elements, elements are stored sequentially.
- Elements can be accessed in O(1) time.
- ArrayList methods are not synchronized.
    -- multiple threads can access the methods without the concept of object/class lock

- With the help of ArrayList we can store duplicate objects
- insertion order is maintained
- null insertion is possible
- It is best to use when frequent operation is retrieval[reading/accessing] of data
- It is worst to use when frequent operation is modification of data
- Along with the collection and List methods, there some extra methods are available for array size and capacity management.
****- ConcurrentModificationException , fail-fast, fail-safe

Q. Explain Vector.
- It is exactly same as ArrayList only difference is Vector methods are synchronized.
- It is slower than ArrayList.
- it is also called as Legacy.
- It is not recommended to use.
- It is recommended to use Synchronized ArrayList.

Q. Explain Stack.
- It is same as Vector and provides methods to implement Stack Data structure
- It provides methods to implement Last-In-First-Out.


---- ArrayList, Vector, Stack internally uses growable array

Q. LinkedList
- It is an implementation class of List(I)
- It is present in java.util package
- Internally it uses Doubly Linked List data structure.
    - when new element has to be added it creates a new node and so on.
- Since it uses DLL to store elements, elements are not stored sequentially.
- Elements can be accessed in O(n) time.
- LinkedList methods are not synchronized.
    -- multiple threads can access the methods without the concept of object/class lock

- With the help of LinkedList we can store duplicate objects
- insertion order is maintained
- null insertion is possible
- It is best to use when frequent operation is modification of data
- It is worst to use when frequent operation is retrieval[reading/accessing] of data
- We do not have concept of capacity in LinkedList.
_____________________________________________________________________________________________________________________________

Wrapper classes :
- Byte
- Short
- Integer
- Long
- Character
- Float
- Double
- Boolean
- these  8 classes present in java.lang package
- and collectivity called as Wrapper classes.
- For each primitive type there is corresponding wrapper is provided.
- These wrapper classes are provided to wrap the primitive datatype into object format.
- All these wrapper classes are immutable classes.

## Auto-unboxing
    - converting wrapper class object into primitive type
    e.g. int i = new Integer("123");

## Auto- Boxing
    - converting primitive value into object format.
    e.g. int a = 40;
          Integer i = a;

** Every wrapper class two sets of methods
   - parseXXX : to convert string into primitive
    e.g. parseInt, parseByte, parseShort, parseChar

   - valueOf : to convert string into wrapper
_____________________________________________________________________________________________________________________________

Set:
- it is an interface present in java.util package

Methods of Set(I):
public interface java.util.Set<E> extends java.util.Collection<E> {
  public abstract int size();
  public abstract boolean isEmpty();
  public abstract boolean contains(java.lang.Object);
  public abstract java.util.Iterator<E> iterator();
  public abstract java.lang.Object[] toArray();
  public abstract <T> T[] toArray(T[]);
  public abstract boolean add(E);
  public abstract boolean remove(java.lang.Object);
  public abstract boolean containsAll(java.util.Collection<?>);
  public abstract boolean addAll(java.util.Collection<? extends E>);
  public abstract boolean retainAll(java.util.Collection<?>);
  public abstract boolean removeAll(java.util.Collection<?>);
  public abstract void clear();
  public abstract boolean equals(java.lang.Object);
  public abstract int hashCode();
  public java.util.Spliterator<E> spliterator();
}


What are the implementation of Set?
- HashSet
- LinkedHashSet
- TreeSet

When to use Set implementations?
-  when we want to store group of unique objects as single unit

When to use HashSet?
- when we want to store group of unique objects as single unit
- no insertion order
- no sorting order.
- we can store homogeneous as well as heterogeneous elements
- we can insert only one null value

When to use LinkedHashSet?
- LinkedHashSet extends HashSet
- when we want to store group of unique objects as single unit
- There will be insertion order of objects will be maintained.
- no sorting order.
- we can store homogeneous as well as heterogeneous elements
- we can insert only one null value

When to use TreeSet?
- when we want to store group of unique objects as single unit
- There will be sorting order of objects will be maintained.
- no insertion order.
- In TreeSet, we can store only homogeneous elements
- No null insertion is possible even once otherwise we get NullPointerException
- For all the wrapper class objects sorting is enabled by default because
    - all wrapper classes implments Comparable(I)

* If we try to add custom objects in the TreeSet,
    and if the objects are not of type Comparable
    then we get exception ClassCastException

Q. How HashSet and LinkedHashSet maintains the uniqueness of elements?
- it uses equals and hashcode method for the uniqueness










