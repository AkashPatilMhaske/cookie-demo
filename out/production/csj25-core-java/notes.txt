Polymorphism :
- poly: many
- morph : forms

- It is an ability of an object to changes its behaviour either at compile time or run time.

- Compile time polymorphism / static binding / early binding /
    - we achieve compile time polymorphism with method overloading

- Run time polymorphism / dynamic binding / late binding /
    - we achieve run time polymorphism with method overriding

What do you mean by object behaviour change?
- Every object has
    - state / fields / attributes / columns / variables / instance variables
    - behaviour / method / function / procedure / implementation / task / instance methods / forms

- Behaviour change means changing the method body by keeping method name same.
------------------------------------------------------------------------------------------------------------

Method overloading :
- it is a process of defining multiple methods with same name and
    different signature( either type of parameters or no. of parameters)

- We can overload private methods
- We can overload static methods
- We can overload final methods
- We can overload main method.
- We can overload constructors.

We do not consider return type for the method overloading.
- In method overloading, call to the method is decided at compile time.

** method overloading can happen in the same class as well as Parent- Child class

Method overloading:
    - We can define the method in the child class with the same name,
     - but different signature as of Parent class method.

------------------------------------------------------------------------------------------------------------
Method overrding:
    - It is a process of defining a method in the child class with the
        - same name
        - same signature
        - same return type
        as of Parent class method.
class A{
    void m1(){}
}
class B extends A{
    void m1(){}
}

Why do we go with the method overrding?
- If we are not happy with the parent class implementation

Rules :
    1. We can't override private methods
    2. We can't override static methods
    3. We can't override final methods
    4. We can increase the method access specifier scop but can't do demotion
        private > default > protected > public
        e.g if parent class is having method visibility to public, then child class method must be public
------------------------------------------------------------------------------------------------------------
final keyword :
- we can apply final keyword for variables, methods, class
1. if a variable is final, we cannot reassign the value.
2. if a method is final, we can't override it
3. if a class final, we can't extend it.
4. If instance variable are final, then they should initialized either in the same line or in the constructor.
5. If static variable are final, then they should initialized either in the same line or in the static block.
- If a reference variable is final, it means it will always point to the same object.
- We can change the object content
------------------------------------------------------------------------------------------------------------
What is an Immutable class?
- It is a class where once object is created we cannot change the content of an object.
e.g. String, all wraper classes[Byte, Short, Integer, Character, Long]

To make any class immutable,
1. We make the class final
2. we make the class members private
3. We do not public setters.

We can create the object of an immutable class
------------------------------------------------------------------------------------------------------------

Concrete method : method which has implementation[body {}]
Concrete class :
    - A class which contains only concrete methods.
    - A normal java class i.e. concrete class cannot have incomplete methods i.e. abstract methods
    - If we write abstract method in a concrete class we ge CTE

Abstraction : It is a process of exposing the functionality and hiding the implementation[method body] details.
Q. How do we achieve abstraction?
A. We achieve abstraction with the help of abstract class and interface.

abstract method :
    - A method which does not have method body and declared with the help of abstract keyword.
         e.g. abstract void m1();
    - an abstract method cannot be written inside the concrete class.
    - We can define abstract method inside the abstract class or interface
    - A method cannot be both abstract and final. Either It can be abstract or final not both

# abstract class :
- A class which is created with abstract keyword.
- e.g, abstract class A {}
- We use abstract class to define abstract methods.
- It is optional to write abstract methods inside the abstract class or an interface.
- we can have empty abstract class.
- A class cannot be both abstract and final. Either It can be abstract or final not both
- An abstract class can contain everything from concrete class + abstract methods

Q. Can we create the object of an abstract class?
A. No. By writing the abstract keyword, we tell compiler that it is an incomplete
   So we can't create object even though class is empty.

Q. Can we write main method inside the abstract class?
A. We can write.

Since we cannot create the object of an abstract class, how can we call abstract class constructor?

-- When a concrete class extends another abstract class, then in the concrete class we must override abstract methods.
- When one abstract class extends another abstract class, then it is optional for the child class to override abstract methods.

Q. How can we call constructor of the abstract class?
A. - Create a concrete subclass then create the object.
   - From child class constructor, it will call abstract class constructor.


# Disadvantages with Abstract class:
1. We can not achieve multiple inheritance
2. We can not achieve 100% abstraction. Even though class is abstract there is not guarantee that it will have only abstract methods

What is the use of abstract class?
- to achieve abstraction[] hiding the implementation details and providing only functionality.
------------------------------------------------------------------------------------------------------------
interface :
- it is a class which is fully unimplemented class.
- this is a class which contains only abstract methods till java 7.
- from java  8 onwards, interface can contain default and static methods as well.

- By default all the variables in the interface are public static final
- By default, all the methods in the interface are public abstract.

In an interface, we cant have
    - instance variables
    - instance methods
    - instance block
    - constructor

We achieve multiple inheritance with the help of interface.







